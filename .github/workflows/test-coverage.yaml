name: PHPUnit (coverage)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  tests:
    runs-on: ubuntu-latest

    env:
      APP_ENV: test
      # Valeurs de base pour éviter les erreurs de cache:clear, normalisées pour l'env CI
      APP_SECRET: testsecret
      APP_URL: http://localhost
      # DB SQLite pour les tests
      DATABASE_URL: 'sqlite:///%kernel.project_dir%/var/data_ci.sqlite'
      # Couverture
      XDEBUG_MODE: coverage

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          coverage: xdebug
          tools: composer, phpunit

      - name: Validate composer.json (no publish check)
        run: composer validate --no-check-publish

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache/files
            vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies (no scripts)
        run: composer install --no-interaction --no-progress --prefer-dist --no-scripts

      # Crée le fichier SQLite et applique le schéma
      - name: Prepare test DB schema (SQLite)
        run: |
          mkdir -p var
          rm -f var/data_ci.sqlite
          touch var/data_ci.sqlite
          php bin/console doctrine:schema:create --env=test -q

      - name: Run PHPUnit (with coverage)
        run: |
          php -v
          ./vendor/bin/phpunit \
            --log-junit var/junit.xml \
            --coverage-xml var/coverage-xml \
            --coverage-clover var/coverage.xml

      - name: Show coverage file (debug)
        run: ls -lh var && du -h var/coverage.xml || true

      - name: Upload coverage.xml as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-clover
          path: var/coverage.xml

      - name: Upload JUnit report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: phpunit-junit
          path: var/junit.xml

      # --- Codecov (requiert le secret CODECOV_TOKEN pour repo privé) ---
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}     # laisse vide pour repo public
          files: var/coverage.xml                 # chemin vers le Clover XML
          verbose: true
          fail_ci_if_error: false                 # mets true si tu veux que ça casse le job si l’upload échoue
